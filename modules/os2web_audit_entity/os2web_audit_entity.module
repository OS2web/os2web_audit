<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

const OS2WEB_AUDIT_ENTITY_TYPES = [
  'webform_submission',
  'file',
];

const OS2WEB_AUDIT_ENTITY_API_USER_ROLES = [
  'os2forms_rest_api_user',
  'os2forms_rest_api_user_write',
];

function os2web_audit_entity_entity_insert(EntityInterface $entity): void {
  // Your code to handle the entity update event.
  $t = 1;
}

/**
 * Implements hook_entity_update().
 */
function os2web_audit_entity_entity_update(EntityInterface $entity): void {
  // Your code to handle the entity update event.
  $t = 1;
}

/**
 * Implements hook_entity_delete().
 */
function os2web_audit_entity_entity_delete(EntityInterface $entity): void {
  // Your code to handle the entity delete event.
  $t = 1;
  if ($entity->bundle() == 'webform') {
    # Try to check for _cpr field for extra logging information.
    $t = 1;
  }
}

// Should it be more configurable in relation to types.
// Storage used instead of load, because this hook is trigger by UI and API
function os2web_audit_entity_entity_storage_load(array $entities, $entity_type): void {
  // webform_submission
  // file (REQUEST_URI)
  foreach ($entities as $entity) {
      if (in_array($entity_type, OS2WEB_AUDIT_ENTITY_TYPES)) {
        $account = \Drupal::currentUser();

        $data = ['API' => FALSE];
        if (os2web_audit_entity_is_api_user($account)) {
          $data['API'] = 'true';
        }

        # Try to check for _cpr field for extra logging information.
        if ($entity_type === 'webform_submission') {
          $webform = $entity->getWebform();
          $elements = $webform->getElementsDecoded();
          $filterFields = preg_grep('/^(.*)cpr(.*)$/', array_keys($elements));
          if (!empty($filterFields)) {
            // CPR field found.

            $t = $entity->id();
            $d = $entity->getElementData($filterFields[0]);
            $d1 = $entity->getOriginalData();
            $d2 = $entity->getData();
            $t=1;
            foreach ($filterFields as $field) {

            }
          }
        }
      }
    }
}


/**
 * Check if the accounts roles are in the array of API roles.
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 *
 * @return bool
 *   If roles found TRUE else FALSE.
 */
function os2web_audit_entity_is_api_user(AccountInterface $account): bool {
  $roles = $account->getRoles();

  return !empty(array_intersect($roles, OS2WEB_AUDIT_ENTITY_API_USER_ROLES));
}

/**
 * Simple logger wrapper.
 *
 * @param string $message
 *   Message to log.
 * @param string $mail
 *   Identify users by e-mail address.
 * @param array<string, string> $metadata
 *   Optional metadata to set.
 */
function os2web_audit_entity_log(string $message, string $mail, array $metadata = []): void {
  /** @var \Drupal\os2web_audit\Service\Logger $logger */
  $logger = \Drupal::service('os2web_audit.logger');

  $metadata['userId'] = $mail;
  $logger->info('Entity', $message, FALSE, $metadata);
}
